---
import type { Fighter } from "@/types/fighters"

interface Props {
  id: Fighter["id"]
  versusId: Fighter["versusId"]
  name: Fighter["name"]
  thumbnailImage: Fighter["thumbnailImage"]
  isMobile?: boolean
  class?: string
}

const {
  id,
  versusId,
  name,
  thumbnailImage,
  isMobile = false,
  class: className,
  ...props
} = Astro.props
---

<a
  data-id={id}
  data-versus-id={versusId}
  data-is-mobile={Number(isMobile)}
  aria-label={`Ir al perfil del peleador ${name}`}
  class:list={["fighter-card", { "slide-fade-in": !isMobile }, className]}
  href={`/peleador/${id}`}
  {...props}
>
  <div class="fighter-card-content">
    <img
      class="fighter-image"
      src={thumbnailImage}
      alt={`Imagen miniatura de ${name}`}
      width="100"
      height="133"
    />
  </div>
</a>

<script>
  import { $$ } from "@/utils/dom-selector"
  import { getUniqueRandomNumber } from "@/utils/get-unique-random-number"
  import { getRandomNumber } from "@/utils/get-random-number"
  import { doodles, doodlePositions } from "@/data/doodles"

  const $cards = $$("a.fighter-card")
  const NS = "http://www.w3.org/2000/svg"
  const doodlesAmount = 4

  $cards.forEach(($card, i) => {
    let currentDoodles: SVGElement[] = []
    const $cardContent = $card.querySelector("div.fighter-card-content")!
    const dataIsMobile = $card.getAttribute("data-is-mobile")
    const isMobileCard = Boolean(Number(dataIsMobile))

    if (!isMobileCard) {
      $card.style.animationDelay = `${i * 0.05}s`
    }

    const addDoodles = () => {
      currentDoodles.forEach((d) => d.remove())
      currentDoodles = []

      const getRandomDoodleIndex = getUniqueRandomNumber(0, doodles.length - 1)
      const getRandomDoodlePositionIndex = getUniqueRandomNumber(0, doodlesAmount - 1)
      const doodlePosition = doodlePositions[getRandomNumber(0, doodlesAmount - 1)]

      for (let i = 0; i < doodlesAmount; i++) {
        const doodleIndex = getRandomDoodleIndex.next().value
        const positionIndex = getRandomDoodlePositionIndex.next().value

        if (typeof doodleIndex !== "number" || typeof positionIndex !== "number") continue

        const { width, height, viewBox, paths } = doodles[doodleIndex]
        const position = doodlePosition[positionIndex]

        const svg = document.createElementNS(NS, "svg")
        svg.setAttribute("width", width)
        svg.setAttribute("height", height)
        svg.setAttribute("viewBox", viewBox)
        svg.setAttribute("fill", "none")
        svg.style.position = "absolute"
        svg.style.top = position.top
        svg.style.right = position.right
        svg.style.bottom = position.bottom
        svg.style.left = position.left

        for (const path of paths) {
          const shape = document.createElementNS(NS, "path")
          shape.setAttribute("d", path)
          shape.setAttribute("stroke", "currentColor")
          shape.setAttribute("stroke-width", "0.5")
          svg.appendChild(shape)
        }

        svg.animate([{ opacity: "0" }, { opacity: ".7" }], {
          duration: 150,
          fill: "forwards",
          easing: "ease-in",
        })

        $cardContent.prepend(svg)
        currentDoodles.push(svg)
      }
    }

    const removeDoodles = () => {
      currentDoodles.forEach(($doodle) => {
        $doodle.animate([{ opacity: ".7" }, { opacity: "0" }], {
          duration: 150,
          fill: "forwards",
          easing: "ease-out",
        }).onfinish = () => $doodle.remove()
      })
      currentDoodles = []
    }

    const dispatchFighterCardMouseEnterEvent = () => {
      const event = new CustomEvent("fighter-card-mouse-enter", {
        bubbles: true,
        composed: true,
        detail: { id: $card.getAttribute("data-id") },
      })
      $card.dispatchEvent(event)
    }

    const dispatchFighterCardMouseLeaveEvent = () => {
      const event = new CustomEvent("fighter-card-mouse-leave")
      $card.dispatchEvent(event)
    }

    const handleMouseEnter = () => {
      dispatchFighterCardMouseEnterEvent()
      addDoodles()
    }

    const handleMouseLeave = () => {
      dispatchFighterCardMouseLeaveEvent()
      removeDoodles()
    }

    $card.addEventListener("mouseenter", handleMouseEnter)
    $card.addEventListener("focusin", handleMouseEnter)
    $card.addEventListener("mouseleave", handleMouseLeave)
    $card.addEventListener("focusout", handleMouseLeave)
  })
</script>

<style>
  .fighter-card {
    --hover-border-background: linear-gradient(hsl(360 86% 46%), hsl(360 86% 26%));
    position: relative;
    display: block;
    padding: 2px;
    background-image: linear-gradient(hsl(0 0% 18%), hsl(0 0% 15%));
    -webkit-tap-highlight-color: transparent;
    aspect-ratio: 45 / 59;
  }

  .fighter-card[data-is-versus="1"] {
    --hover-border-background: linear-gradient(hsl(240 80% 54%), hsl(240 80% 45%));
  }

  .fighter-card::before {
    content: "";
    position: absolute;
    inset: 0;
    opacity: 0;
    background-image: var(--hover-border-background);
    transition: opacity 150ms ease-out;
  }

  .fighter-card:is(:hover, :focus-visible, [data-is-versus="1"])::before {
    opacity: 1;
    transition-timing-function: ease-in;
  }

  .fighter-card.slide-fade-in {
    /* animation: slide-fade-in 600ms ease-out forwards; */
  }

  .fighter-card-content {
    isolation: isolate;
    block-size: 100%;
    background-image: radial-gradient(hsl(0 0% 25%), hsl(0 0% 8%) 80%);
    overflow: hidden;
  }

  .fighter-image {
    position: relative;
    block-size: auto;
    transition: transform 150ms ease-out;
  }

  .fighter-card:is(:hover, :focus-visible, [data-is-versus="1"]) .fighter-image {
    transform: scale(1.06);
    transition-timing-function: ease-in;
  }

  @keyframes slide-fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
