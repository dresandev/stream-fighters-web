---
interface Props {
  class?: string
}

const { class: className, ...props } = Astro.props
---

<section class:list={["carousel", className]} {...props}>
  <div class="viewport">
    <div class="container">
      <slot />
    </div>
  </div>
  <div class="dots"></div>
</section>

<script>
  import EmblaCarousel, { type EmblaOptionsType, type EmblaCarouselType } from "embla-carousel"

  const addDotBtnsAndClickHandlers = (
    emblaApi: EmblaCarouselType,
    dotsNode: HTMLElement,
  ): (() => void) => {
    let dotNodes: HTMLElement[] = []

    const addDotBtnsWithClickHandlers = (): void => {
      const slides = emblaApi.scrollSnapList()

      dotsNode.innerHTML = slides
        .map((_, i) => {
          return `<button aria-label='Mostrar slide ${++i} de ${slides.length}' class='dot' type='button'></button>`
        })
        .join("")

      dotNodes = Array.from(dotsNode.querySelectorAll(".dot"))
      dotNodes.forEach((dotNode, index) => {
        dotNode.addEventListener("click", () => emblaApi.scrollTo(index), false)
      })
    }

    const toggleDotBtnsActive = (): void => {
      const previous = emblaApi.previousScrollSnap()
      const selected = emblaApi.selectedScrollSnap()
      dotNodes[previous]?.classList.remove("selected")
      dotNodes[selected]?.classList.add("selected")
    }

    emblaApi
      .on("init", addDotBtnsWithClickHandlers)
      .on("reInit", addDotBtnsWithClickHandlers)
      .on("init", toggleDotBtnsActive)
      .on("reInit", toggleDotBtnsActive)
      .on("select", toggleDotBtnsActive)

    return (): void => {
      dotsNode.innerHTML = ""
    }
  }

  const setCurrentSlideClass = (emblaApi: EmblaCarouselType): void => {
    const slides = emblaApi.slideNodes()
    const current = emblaApi.selectedScrollSnap()

    slides.forEach((slide, index) => {
      slide.classList.toggle("is-active", index === current)
    })
  }

  const OPTIONS: EmblaOptionsType = { loop: true }

  const emblaNode = document.querySelector<HTMLElement>(".carousel")!
  const viewportNode = emblaNode.querySelector<HTMLElement>(".viewport")!
  const dotsNode = emblaNode.querySelector<HTMLElement>(".dots")!

  const emblaApi = EmblaCarousel(viewportNode, OPTIONS)

  const removeDotBtnsAndClickHandlers = addDotBtnsAndClickHandlers(emblaApi, dotsNode)

  emblaApi
    .on("init", () => setCurrentSlideClass(emblaApi))
    .on("reInit", () => setCurrentSlideClass(emblaApi))
    .on("select", () => setCurrentSlideClass(emblaApi))
    .on("destroy", removeDotBtnsAndClickHandlers)
</script>

<style>
  .carousel {
    --slide-spacing: 0px;
    --slide-size: 300px;
    max-inline-size: 500px;
    margin-inline: auto;
  }

  .viewport {
    padding-block: 4px;
    overflow: clip visible;
    mask-image: linear-gradient(
      to right,
      transparent,
      black 40px,
      black calc(100% - 40px),
      transparent
    );
  }

  .container {
    display: flex;
    touch-action: pan-y pinch-zoom;
    margin-left: calc(var(--slide-spacing) * -1);
  }

  .dots {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    block-size: 36px;
    padding-block-start: 8px;
    -webkit-tap-highlight-color: transparent;
  }

  :global(.dot) {
    position: relative;
    inline-size: 24px;
    block-size: 24px;
  }

  :global(.dot:focus-visible) {
    border-radius: 50%;
  }

  :global(.dot::before) {
    content: "";
    position: absolute;
    inset: 6px;
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    transition: background-color 150ms;
  }

  :global(.dot.selected::before) {
    background-color: currentColor;
  }
</style>
